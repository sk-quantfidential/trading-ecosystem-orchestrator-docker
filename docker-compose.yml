# Trading Ecosystem Infrastructure
# Redis for service discovery and caching + PostgreSQL for persistent storage

name: trading-ecosystem-orchestrator-docker

networks:
  trading-ecosystem:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
  jaeger-data:
  otel-data:

services:
  # Redis - Service Discovery and Caching
  redis:
    image: redis:8-alpine
    container_name: trading-ecosystem-redis-infra
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      trading-ecosystem:
        ipv4_address: 172.20.0.10
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - ./redis/users.acl:/usr/local/etc/redis/users.acl:ro
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-u", "redis://healthcheck:health-pass@localhost:6379", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    environment:
      - REDIS_REPLICATION_MODE=master

  # Redis Exporter - Prometheus Metrics for Redis
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: trading-ecosystem-redis-exporter-infra
    restart: unless-stopped
    ports:
      - "127.0.0.1:9121:9121"
    networks:
      trading-ecosystem:
        ipv4_address: 172.20.0.11
    environment:
      - REDIS_ADDR=redis://172.20.0.10:6379
      - REDIS_USER=healthcheck
      - REDIS_PASSWORD=health-pass
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9121/metrics"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # PostgreSQL - Persistent Data Storage
  postgres:
    image: postgres:17-alpine
    container_name: trading-ecosystem-postgres-infra
    restart: unless-stopped
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      trading-ecosystem:
        ipv4_address: 172.20.0.20
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    environment:
      POSTGRES_DB: trading_ecosystem
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres-admin-pass
      PGDATA: /var/lib/postgresql/data/pgdata
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d trading_ecosystem"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # PostgreSQL Exporter - Prometheus Metrics for PostgreSQL
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: trading-ecosystem-postgres-exporter-infra
    restart: unless-stopped
    ports:
      - "127.0.0.1:9187:9187"
    networks:
      trading-ecosystem:
        ipv4_address: 172.20.0.21
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres-admin-pass@172.20.0.20:5432/trading_ecosystem?sslmode=disable
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Service Registry and Configuration
  service-registry:
    image: alpine:3.19
    container_name: trading-ecosystem-registry-infra
    restart: unless-stopped
    ports:
      - "127.0.0.1:8081:8080"
    networks:
      trading-ecosystem:
        ipv4_address: 172.20.0.30
    volumes:
      - ./registry:/app
    working_dir: /app
    command: ["./registry-service.sh"]
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "sleep 2 && wget --quiet --tries=1 --spider http://127.0.0.1:8080/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Prometheus - Metrics Collection and Monitoring
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: trading-ecosystem-prometheus-infra
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      trading-ecosystem:
        ipv4_address: 172.20.0.40
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Grafana - Visualization and Dashboards
  grafana:
    image: grafana/grafana:10.2.2
    container_name: trading-ecosystem-grafana-infra
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      trading-ecosystem:
        ipv4_address: 172.20.0.50
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=redis-datasource,grafana-clock-panel
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51.0
    container_name: trading-ecosystem-jaeger-infra
    restart: unless-stopped
    ports:
      - "127.0.0.1:16686:16686"  # Jaeger UI
      - "127.0.0.1:14268:14268"  # HTTP collector
      - "127.0.0.1:14269:14269"  # HTTP admin/metrics
      - "127.0.0.1:14250:14250"  # gRPC collector
      - "127.0.0.1:6831:6831/udp"  # UDP jaeger-agent
      - "127.0.0.1:6832:6832/udp"  # UDP jaeger-agent
    networks:
      trading-ecosystem:
        ipv4_address: 172.20.0.60
    volumes:
      - jaeger-data:/tmp
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://172.20.0.40:9090
      - PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=true
      - SPAN_STORAGE_TYPE=memory
      - MEMORY_MAX_TRACES=50000
      - LOG_LEVEL=info
    command:
      - "--memory.max-traces=50000"
      - "--query.base-path=/"
      - "--admin.http.host-port=:14269"
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # OpenTelemetry Collector - Telemetry Aggregation
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.88.0
    container_name: trading-ecosystem-otel-collector-infra
    restart: unless-stopped
    ports:
      - "127.0.0.1:4317:4317"   # OTLP gRPC receiver
      - "127.0.0.1:4318:4318"   # OTLP HTTP receiver
      - "127.0.0.1:8888:8888"   # Prometheus metrics endpoint
      - "127.0.0.1:8889:8889"   # Prometheus exporter endpoint
      - "127.0.0.1:13133:13133" # Health check endpoint
      - "127.0.0.1:1777:1777"   # pprof profiling
      - "127.0.0.1:55679:55679" # zPages debugging
    networks:
      trading-ecosystem:
        ipv4_address: 172.20.0.70
    volumes:
      - otel-data:/tmp
      - ./otel-collector/config.yaml:/etc/otelcol-contrib/config.yaml:ro
    command: ["--config=/etc/otelcol-contrib/config.yaml"]
    depends_on:
      prometheus:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:13133/"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Audit Correlator - Audit Event Management and Correlation
  audit-correlator:
    build:
      context: ..
      dockerfile: audit-correlator-go/Dockerfile
    image: audit-correlator:latest
    container_name: trading-ecosystem-audit-correlator
    restart: unless-stopped
    ports:
      - "127.0.0.1:8082:8080"   # HTTP port (external:internal)
      - "127.0.0.1:50052:50051"  # gRPC port (external:internal)
    networks:
      trading-ecosystem:
        ipv4_address: 172.20.0.80
    volumes:
      - ./volumes/audit-correlator/data:/app/data
      - ./volumes/audit-correlator/logs:/app/logs
      - ./config:/app/config:ro  # Mount topology config (read-only)
    environment:
      # Service Identity
      - SERVICE_NAME=audit-correlator
      - SERVICE_INSTANCE_NAME=audit-correlator  # Singleton instance
      - SERVICE_VERSION=1.0.0
      - ENVIRONMENT=docker

      # Network Configuration
      - HTTP_PORT=8080
      - GRPC_PORT=50051

      # Database Configuration
      - POSTGRES_URL=postgres://audit_adapter:audit-adapter-db-pass@172.20.0.20:5432/trading_ecosystem?sslmode=disable
      - REDIS_URL=redis://audit-adapter:audit-pass@172.20.0.10:6379/0
      - MONGO_URL=mongodb://172.20.0.20:27017/audit_correlator

      # Configuration
      - MAX_CONNECTIONS=25
      - MAX_IDLE_CONNECTIONS=10
      - CONNECTION_TIMEOUT=30s
      - IDLE_TIMEOUT=10m
      - MAX_RETRIES=3
      - RETRY_INTERVAL=5s
      - DEFAULT_TTL=1h
      - HEALTH_CHECK_INTERVAL=15s

      # Logging
      - LOG_LEVEL=info
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --quiet --tries=1 -O /dev/null http://localhost:8080/api/v1/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 45s

  # Custodian Simulator - Custodian Operations and Settlements
  custodian-simulator:
    build:
      context: ..
      dockerfile: custodian-simulator-go/Dockerfile
    image: custodian-simulator:latest
    container_name: trading-ecosystem-custodian-komainu
    restart: unless-stopped
    ports:
      - "127.0.0.1:8083:8080"   # HTTP port (external:internal)
      - "127.0.0.1:50053:50051"  # gRPC port (external:internal)
    networks:
      trading-ecosystem:
        ipv4_address: 172.20.0.81
    volumes:
      - ./volumes/custodian-komainu/data:/app/data
      - ./volumes/custodian-komainu/logs:/app/logs
    environment:
      # Service Identity
      - SERVICE_NAME=custodian-simulator
      - SERVICE_INSTANCE_NAME=custodian-komainu
      - SERVICE_VERSION=1.0.0
      - ENVIRONMENT=docker

      # Network Configuration
      - HTTP_PORT=8080
      - GRPC_PORT=50051

      # Database Configuration (custodian_adapter user)
      - POSTGRES_URL=postgres://custodian_adapter:custodian-adapter-db-pass@172.20.0.20:5432/trading_ecosystem?sslmode=disable
      - REDIS_URL=redis://custodian-adapter:custodian-pass@172.20.0.10:6379/0

      # Configuration Service
      - CONFIG_SERVICE_URL=http://172.20.0.30:8080

      # Connection Settings
      - MAX_CONNECTIONS=25
      - MAX_IDLE_CONNECTIONS=10
      - CONNECTION_TIMEOUT=30s
      - REQUEST_TIMEOUT=5s

      # Cache Configuration
      - CACHE_TTL=5m
      - CACHE_NAMESPACE=custodian

      # Service Discovery
      - SERVICE_DISCOVERY_NAMESPACE=custodian
      - HEARTBEAT_INTERVAL=30s

      # Health Check
      - HEALTH_CHECK_INTERVAL=30s

      # Logging
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --quiet --tries=1 -O /dev/null http://localhost:8080/api/v1/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 45s
  # Exchange Simulator - TSE-0001.4.2
  exchange-simulator:
    build:
      context: ..
      dockerfile: exchange-simulator-go/Dockerfile
    image: exchange-simulator:latest
    container_name: trading-ecosystem-exchange-okx
    restart: unless-stopped
    ports:
      - "127.0.0.1:8084:8080"   # HTTP port (external:internal)
      - "127.0.0.1:50054:50051"  # gRPC port (external:internal)
    networks:
      trading-ecosystem:
        ipv4_address: 172.20.0.82
    volumes:
      - ./volumes/exchange-okx/data:/app/data
      - ./volumes/exchange-okx/logs:/app/logs
    environment:
      # Service Identity
      - SERVICE_NAME=exchange-simulator
      - SERVICE_INSTANCE_NAME=exchange-okx
      - SERVICE_VERSION=1.0.0
      - ENVIRONMENT=docker

      # Network Configuration
      - HTTP_PORT=8080
      - GRPC_PORT=50051

      # Database Configuration (exchange_adapter user)
      - POSTGRES_URL=postgres://exchange_adapter:exchange-adapter-db-pass@172.20.0.20:5432/trading_ecosystem?sslmode=disable
      - REDIS_URL=redis://exchange-adapter:exchange-pass@172.20.0.10:6379/0

      # Configuration Service
      - CONFIG_SERVICE_URL=http://172.20.0.30:8080

      # Connection Settings
      - MAX_CONNECTIONS=25
      - MAX_IDLE_CONNECTIONS=10
      - CONNECTION_TIMEOUT=30s
      - REQUEST_TIMEOUT=5s

      # Cache Configuration
      - CACHE_TTL=5m
      - CACHE_NAMESPACE=exchange

      # Service Discovery
      - SERVICE_DISCOVERY_NAMESPACE=exchange
      - HEARTBEAT_INTERVAL=30s

      # Health Check
      - HEALTH_CHECK_INTERVAL=30s

      # Logging
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --quiet --tries=1 -O /dev/null http://localhost:8080/api/v1/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 45s

  # Market Data Simulator - Singleton Service (TSE-0001.12.0)
  market-data-simulator:
    build:
      context: ..
      dockerfile: market-data-simulator-go/Dockerfile
    image: market-data-simulator:latest
    container_name: trading-ecosystem-market-data-coinmetrics
    restart: unless-stopped
    ports:
      - "127.0.0.1:8085:8080"   # HTTP port (external:internal)
      - "127.0.0.1:50055:50051"  # gRPC port (external:internal)
    networks:
      trading-ecosystem:
        ipv4_address: 172.20.0.84
    volumes:
      - ./volumes/market-data-coinmetrics/data:/app/data
      - ./volumes/market-data-coinmetrics/logs:/app/logs
    environment:
      # Service Identity
      - SERVICE_NAME=market-data-simulator
      - SERVICE_INSTANCE_NAME=market-data-coinmetrics
      - SERVICE_VERSION=1.0.0
      - ENVIRONMENT=docker

      # Network Configuration
      - HTTP_PORT=8080
      - GRPC_PORT=50051

      # Database Configuration (market_data_adapter user)
      - POSTGRES_URL=postgres://market_data_adapter:market-data-adapter-db-pass@172.20.0.20:5432/trading_ecosystem?sslmode=disable
      - REDIS_URL=redis://market-data-adapter:market-data-pass@172.20.0.10:6379/0

      # Configuration Service
      - CONFIG_SERVICE_URL=http://172.20.0.30:8080

      # Connection Settings
      - REQUEST_TIMEOUT=5s

      # Cache Configuration
      - CACHE_TTL=5m

      # Health Check
      - HEALTH_CHECK_INTERVAL=30s

      # Logging
      - LOG_LEVEL=info
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --quiet --tries=1 -O /dev/null http://localhost:8080/api/v1/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 45s

  # Risk Monitor - Production-like Risk Monitoring
  risk-monitor:
    build:
      context: ..
      dockerfile: risk-monitor-py/Dockerfile
    image: risk-monitor:latest
    container_name: trading-ecosystem-risk-monitor-lh
    restart: unless-stopped
    ports:
      - "127.0.0.1:8086:8080"  # HTTP port (external:internal)
      - "127.0.0.1:50056:50051"  # gRPC port (external:internal)
    networks:
      trading-ecosystem:
        ipv4_address: 172.20.0.85
    volumes:
      - ./volumes/risk-monitor-lh/data:/app/data
      - ./volumes/risk-monitor-lh/logs:/app/logs
    environment:
      # Service Identity (NEW for multi-instance support)
      - SERVICE_NAME=risk-monitor
      - SERVICE_INSTANCE_NAME=risk-monitor-lh
      - ENVIRONMENT=docker

      # Network Configuration
      - HOST=0.0.0.0
      - HTTP_PORT=8080
      - GRPC_PORT=50051

      # Database Configuration
      - POSTGRES_URL=postgresql+asyncpg://risk_adapter:risk-adapter-db-pass@172.20.0.20:5432/trading_ecosystem
      - REDIS_URL=redis://risk-adapter:risk-pass@172.20.0.10:6379/0

      # Service Discovery
      - SERVICE_REGISTRY_URL=http://172.20.0.30:8080
      - SERVICE_VERSION=0.1.0
      - HEALTH_CHECK_INTERVAL=30
      - REGISTRATION_RETRY_INTERVAL=5

      # Risk Data Adapter Configuration
      - RISK_ADAPTER_SERVICE_NAME=risk-monitor
      - RISK_ADAPTER_SERVICE_INSTANCE_NAME=risk-monitor-lh
      - RISK_ADAPTER_ENVIRONMENT=docker
      - RISK_ADAPTER_POSTGRES_URL=postgresql+asyncpg://risk_adapter:risk-adapter-db-pass@172.20.0.20:5432/trading_ecosystem
      - RISK_ADAPTER_REDIS_URL=redis://risk-adapter:risk-pass@172.20.0.10:6379/0

      # OpenTelemetry
      - OTEL_SERVICE_NAME=risk-monitor
      - OTEL_EXPORTER_ENDPOINT=http://172.20.0.60:4317
      - OTEL_INSECURE=true

      # Logging
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8080/api/v1/health')"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 60s

  # ============================================================================
  # Trading System Engine - Systematic Trading Service
  # ============================================================================
  trading-system-engine:
    build:
      context: ..
      dockerfile: trading-system-engine-py/Dockerfile
    image: trading-system-engine:latest
    container_name: trading-ecosystem-trading-engine-lh
    restart: unless-stopped
    ports:
      - "127.0.0.1:8087:8080"  # HTTP port (external:internal)
      - "127.0.0.1:50057:50051"  # gRPC port (external:internal)
    networks:
      trading-ecosystem:
        ipv4_address: 172.20.0.86
    volumes:
      - ./volumes/trading-engine-lh/data:/app/data
      - ./volumes/trading-engine-lh/logs:/app/logs
    environment:
      # Service Identity (NEW for multi-instance support)
      - SERVICE_NAME=trading-system-engine
      - SERVICE_INSTANCE_NAME=trading-engine-lh
      - SERVICE_VERSION=0.1.0
      - ENVIRONMENT=docker

      # Network Configuration
      - HOST=0.0.0.0
      - HTTP_PORT=8080
      - GRPC_PORT=50051

      # Database Configuration
      - POSTGRES_URL=postgresql+asyncpg://trading_adapter:trading-adapter-db-pass@172.20.0.20:5432/trading_ecosystem
      - REDIS_URL=redis://trading-adapter:trading-pass@172.20.0.10:6379/0

      # Service Discovery
      - SERVICE_REGISTRY_URL=http://172.20.0.30:8080
      - HEALTH_CHECK_INTERVAL=30
      - REGISTRATION_RETRY_INTERVAL=5

      # Trading Data Adapter Configuration
      - TRADING_ADAPTER_SERVICE_NAME=trading-system-engine
      - TRADING_ADAPTER_SERVICE_INSTANCE_NAME=trading-engine-lh
      - TRADING_ADAPTER_ENVIRONMENT=docker
      - TRADING_ADAPTER_POSTGRES_URL=postgresql+asyncpg://trading_adapter:trading-adapter-db-pass@172.20.0.20:5432/trading_ecosystem
      - TRADING_ADAPTER_REDIS_URL=redis://trading-adapter:trading-pass@172.20.0.10:6379/0

      # OpenTelemetry
      - OTEL_SERVICE_NAME=trading-system-engine
      - OTEL_EXPORTER_ENDPOINT=http://172.20.0.60:4317
      - OTEL_INSECURE=true

      # Logging
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json

      # Trading Engine Settings
      - MAX_POSITION_SIZE=1000000.0
      - RISK_LIMIT_THRESHOLD=500000.0
      - ORDER_TIMEOUT_SECONDS=30
      - STRATEGY_COOLDOWN_SECONDS=60
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8080/api/v1/health')"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 60s

  # ============================================================================
  # Test Coordinator - Scenario Orchestration and Chaos Testing
  # ============================================================================
  test-coordinator:
    build:
      context: ..
      dockerfile: test-coordinator-py/Dockerfile
    image: test-coordinator:latest
    container_name: trading-ecosystem-test-coordinator
    restart: unless-stopped
    ports:
      - "127.0.0.1:8088:8080"  # HTTP port (external:internal)
      - "127.0.0.1:50058:50051"  # gRPC port (external:internal)
    networks:
      trading-ecosystem:
        ipv4_address: 172.20.0.87
    volumes:
      - ./volumes/test-coordinator/data:/app/data
      - ./volumes/test-coordinator/logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock  # Docker socket for container orchestration
    environment:
      # Service Identity (NEW for multi-instance support)
      - SERVICE_NAME=test-coordinator
      - SERVICE_INSTANCE_NAME=test-coordinator  # Singleton instance
      - SERVICE_VERSION=0.1.0
      - ENVIRONMENT=docker

      # Network Configuration
      - HOST=0.0.0.0
      - HTTP_PORT=8080
      - GRPC_PORT=50051

      # Database Configuration
      - POSTGRES_URL=postgresql+asyncpg://test_coordinator_adapter:test-coordinator-adapter-db-pass@172.20.0.20:5432/trading_ecosystem
      - REDIS_URL=redis://test-coordinator-adapter:test-coordinator-pass@172.20.0.10:6379/0

      # Service Discovery
      - SERVICE_REGISTRY_URL=http://172.20.0.30:8080
      - HEALTH_CHECK_INTERVAL=30
      - REGISTRATION_RETRY_INTERVAL=5

      # Test Coordinator Data Adapter Configuration
      - TEST_COORDINATOR_ADAPTER_SERVICE_NAME=test-coordinator
      - TEST_COORDINATOR_ADAPTER_SERVICE_INSTANCE_NAME=test-coordinator
      - TEST_COORDINATOR_ADAPTER_ENVIRONMENT=docker
      - TEST_COORDINATOR_ADAPTER_POSTGRES_URL=postgresql+asyncpg://test_coordinator_adapter:test-coordinator-adapter-db-pass@172.20.0.20:5432/trading_ecosystem
      - TEST_COORDINATOR_ADAPTER_REDIS_URL=redis://test-coordinator-adapter:test-coordinator-pass@172.20.0.10:6379/0

      # Docker Configuration
      - DOCKER_SOCKET=unix:///var/run/docker.sock

      # OpenTelemetry
      - OTEL_SERVICE_NAME=test-coordinator
      - OTEL_EXPORTER_ENDPOINT=http://172.20.0.60:4317
      - OTEL_INSECURE=true

      # Logging
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json

      # Test Coordination Settings
      - SCENARIO_TIMEOUT_SECONDS=3600
      - CHAOS_INJECTION_ENABLED=true
      - SCENARIO_RESULTS_RETENTION_DAYS=7
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8080/api/v1/health')"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 60s
